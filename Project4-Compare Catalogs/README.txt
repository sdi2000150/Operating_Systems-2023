OperatingSystems-Fall2023-Project4
**************README**************
_____________________________________________________________________________________________________________________________
ΟΜΑΔΙΚΗ ΕΡΓΑΣΙΑ 2 ΑΤΟΜΩΝ:

Όνομα1: Κωνσταντίνος Ρούσσος | UserID1: sdi1800166 (1115201800166)

Όνομα2: Θεόδωρος Μωραΐτης | UserID2: sdi2000150 (1115202000150)

-----------------------------------------------------------------------------------------------------------------------------
          Πρόγραμμα γραμμής εντολών "cmpcat" που συγκρίνει δύο ιεραρχίες καταλόγων μεταξύ τους             
(και δημιουργεί μια νέα ιεραρχία καταλόγων συγχωνεύοντας τις δύο υπό σύγκριση ιεραχίες σε ένα νέο κατάλογο)
                             (με χρηση high/low level I/O FS Operations)                                   
-----------------------------------------------------------------------------------------------------------------------------
_____________________________________________________________________________________________________________________________
ΒΑΣΙΚΑ ΣΤΟΙΧΕΙΑ ΤΟΥ ΠΡΟΓΡΑΜΜΑΤΟΣ:

-Το προγραμμα "cmpcat" συγκρίνει δύο ιεραρχίες καταλόγων μεταξύ τους και, αν έχουν διαφορές, τις εμφανίζει στο tty.
 Διαφορετικά (αν δεν έχουν διαφορες/είναι οι ίδιοι κατάλογοι) δεν εμφανίζει τίποτα.

-Το πρόγραμμα επίσης, μπορεί να δημιουργήσει μια νέα ιεραρχία καταλόγων συγχωνεύοντας τις δύο υπό σύγκριση ιεραχίες σε ένα 
 νέο κατάλογο.

-Το πρόγραμμα μπορεί να κληθεί από οποιοδόποτε path, καλώντας κατάλληλα το εκτελέσιμο (με το relative path της τοποθεσίας 
 του), καθώς και να λάβει ορίσματα (καταλόγους) που βρίσκονται σε οποιοδήποτε path (αρκεί να δίνονται σωστά τα relative paths
  της τοποθεσίας τους).

-Χρησιμοποιήσαμε κυρίως high-level libC-calls για τα I/O Operations.

Το πρόγραμμα αποτελείται από τα παρακάτω source files:
    -cmpcat.c
    -functions.c

Επίσης, παρέχονται και τα παρακάτω header files:
    -interface.h

_____________________________________________________________________________________________________________________________
COMPILATION/EXECUTION ΤΟΥ ΠΡΟΓΡΑΜΜΑΤΟΣ:

1) Separate compilation του προγράμματος, με χρήση Makefile:
 > make
 ,με την οποία δημιουργείται το εκτελέσιμο "cmpcat".

2) Εκτέλεση του προγράμματος:

  2.1) Αρχικά, κάνουμε untar το tests.tar, ώστε να έχουμε πρόσβαση στα παραδείγματα ζευγών directories για testing:
     > tar -xvf tests.tar
     Αυτό γίνεται για να διατηρήσουμε τα hard links που έχουμε δημιουργήσει.

  2.2.1) Εκτέλεση του προγράμματος manually:
     > [rm -rf [dirC]]                      (if dirC exists)
     > ./cmpcat -d dirA dirB [-s dirC]

  2.2.2) Εκτέλεση του προγράμματος αυτοματοποιημένα:
    (μπορούμε εντός του Makefile να πειράξουμε τη μεταβλητή EXAMPLE_DIR ώστε να εκτελεστεί το test από το directory tests που
     θέλουμε)
    > make run
    (για απλή εκτέλεση), ή:
    > make valgrind
    (για εκτέλεση με valgrind)

3) Clean του εκτελέσιμου, των .o αρχείων, του directory tests καθώς και των βοηθητικών .txt αρχείων που δημιουργήθηκαν κατά 
   την μεταγλώττιση/εκτέλεση:
 > make clean


Σχόλια για τα ορίσματα κατά την κλήση τoυ εκτελέσιμου:

-Τα dirA και dirB είναι directories που υπάρχουν ήδη, ενω το dirC είναι ένα νέο directory που θα δημιουργηθεί 
 (και αν υπάρχει ήδη θα πρέπει πρώτα να διαγραφέι) από την συγχώνευση των δύο υπό σύγκριση dirA και dirB.

-Τα dirA, dirB, dirC μπορούν να είναι οποιασδήποτε μορφής (πχ "directory_name" αν βρίσκεται στον ίδιο κατάλογο με το 
 εκτελέσιμο "cmpcat", ή πχ "tests/GivenExample/directory_name" αν βρίσκεται σε υποφάκελο σε σχέση με την τοποθεσία του
  "cmpcat", ή πχ "../../AnotherFolder/directory_name" αν βρίσκεται σε τελείως διαφορετικό φάκελο σε σχέση με την τοποθεσία 
  του "cmpcat", κ.ο.κ.).

-Τα "σύνολα" των arguments "-d dirA dirB", "-s dirC" μπορούν να δοθούν μεταξύ τους σε τυχαία σειρά 
 (με το εκάστοτε flag + argument να είναι μαζί και με αυτή την σειρά).

-Συγκεκριμένα, το "-s dirC" μπορεί να παραληφθεί, αν θέλουμε απλά να κάνουμε την σύγκριση των δύο καταλόγων,
 χωρίς να δημιουργήσουμε τον νέο συγχωνευμένο κατάλογο.

_____________________________________________________________________________________________________________________________
ΛΟΓΙΚΗ ΠΡΟΣΕΓΓΙΣΗΣ ΤΗΣ ΛΥΣΗΣ:

Δημιουργούμε 4 .txt files στα οποία αποθηκεύουμε τα παρακάτω στοιχεία με συκγεκριμένη γραμμογράφηση:

%s %s %lu %-20lu

Στην πρώτη θέση έχουμε την ένδειξη για τον τύπο της οντότητας που συναντήσαμε (f για αρχείο, d για directory, l για link).
Στη δεύτερη θέση έχουμε το path της οντότητας.
Στην τρίτη θέση έχουμε το inode στο directory στο οποίο βρίσκεται.
Στην τέταρτη θέση έχουμε το inode μετά την συγχώνευση.

Τα 4 αρχεία αποτελόυνται από 2 αχεία entities και 2 αρχεία differences.
Στα entities αρχεία αποθηκεύουμε όλα τα entities που υπάρχουν στους καταλόγους που δεχόμαστε ως όρισμα.
Στα differences αρχεία αποθηκεύουμε τα entities τα οποία είτε διαφέρουν είτε δεν υπάρχουν στον άλλο κατάλογο.

*Τα differences αρχεία έχουν και ένα header %d στην πρώτη γραμμή του αρχείου, που μας ενημερώνει για τον αριθμό των 
εγγραφών στο differences αρχείο που βρισκόμαστε. (initialized with 0)

Η επιλογή των αρχείων έγινε ώστε να μειώσουμε την δέσμευση μνήμης στις περιπτώσεις όπου έχουμε υπερβολικά μεγάλα directories.

Μέσα από τη συμπλήρωση και την ανάλογη προσπέλαση αυτών των αρχείων καταφέρνουμε και υλοποιούμε το ζητούμενο της εκφώνησης.
Αναλυτικά:

____________________
-Compare Operations:

Αφού έχουμε ελέγξει ότι τα filenames και τα paths μας είναι σωστά, μπαίνουμε στην compareDircetories όπου αρχικά ελέγχουμε 
εάν τα directories μας είναι ίδια.

Στην περίπτωση όπου είναι ίδια κάνουμε traverse το πρώτο directory (μιας και είναι όμοια) και απλά προσθέτουμε τα entities 
που συαντάμε κάθε φορά στα Entities.txt αρχεία. Όπου συναντάμε directory καλούμε ξανά την ίδια συνάρτηση (traverseSame) και
έτσι επιτυγχάνεται η αναδρομικότητα και αυτής της σύγκρισης. Για το merge κανονικά χρειαζόμαστε μόνο το ένα Entities.txt 
αλλά δημιουργούμε και τα δύο για καλύτερο error handling.

Στην περίπτωση όπου τα directories είναι διαφορετικά, πρώτα ψάχνουμε αν όλα τα στοιχεία του directory A υπάρχουν στο 
directory B και μετά ελέγχουμε εάν υπάρχουν στοιχεία στο directory A που να μην τα συναντήσαμε κατά την προσπέλαση του
directory A. Η σύγκριση των entities του κάθε directory γίνεται με βάση τις οδηγίες της εκφώνησης. Κάθε φορά που συναντάμε
διαφορετικό entity ή entity που να μην υπάρχει στο άλλο directory, αυξάνουμε το αντίστοιχο header κατά 1. Από τις συναρ-
τήσεις που καλούμε για την προσπέλαση, η traversedirA είναι αυτή που δημιουργεί την αναδρομικότητα της compare.

Και στις δύο περιπτώσεις, κάθε φορά που συναντάμε ένα entity για πρώτη φορά το περνάμε στο ανάλογο entities αρχείο, ενώ 
όταν συαντάμε διαφορές τις περνάμε και στα 2 differences αρχεία (εκτός από τις περιπτώσεις όπου το entity δεν υπάρχει στο
άλλο directory). Κατά την ενημέρωση των αρχείων, το τελευταίο πεδίο (%-20lu) αρχικοποιείται με 0.

Αφού επιστρέψουμε από την compareDircetories, αποθηκεύουμε τα headers μας στα differences αρχεία και εξετάζουμε εάν είναι 
διαφορετικά του μηδενός. Σε αυτή την περίπτωση έχουμε διαφορές οπότε εκτυπώνουμε για κάθε directory όπου έχει έστω και μια 
διαφορά τα entities του.

__________________
-Merge Operations:

Στην περίπτωση όπου έχουμε και το -s flag κάνουμε rewind τους file descriptors μας για να ξεκινήσει η διαδικασία του merge.

Εφόσον έχουμε τελειώσει την καταχώρηση των entities του κάθε directory, εξετάζουμε τα αρχεία των διαφορών για να διαλέξουμε
 το directory με βάση το οποίο θα ξεκινήσουμε την συγχώνευση. Επιλέγουμε ως core directory αυτό με τις περισσότερες διαφο-
ρές, για να ελαττώσουμε το χρόνο εκτέλεσης και τα απαιτούμενα resources. Με βάση αυτή την παραδοχή, φτιάχνουμε έναν κλώνο 
του directory που έχουμε επιλέξει ως core στο directory που μας έχει περαστεί ως όρισμα. Στην συνέχεια επιλέγουμε ως 
δεύτερο αρχείο merge, το αρχείο με τα differences του άλλου directory. Για κάθε entity μέσα στο differences αρχείο του 
άλλου directory εξετάζουμε εάν υπάρχει ήδη το ίδιο entity με το ίδιο όνομα στο ίδιο path και εν συνεχεία προχωράμε στο 
merging. Δηλαδή, σε κάθε merge έχουμε το Entities.txt αρχείο του directory που έχουμε επιλέξει ως core και το 
Differences.txt αρχείο του δεύτερου directory.

Πιο αναλυτικά η λογική που ακολουθείται είναι η εξής:

Merge Core Directory:

Για κάθε entity που έχουμε μέσα στο αρχείο αρχικά ψάχνουμε να βρούμε τι τύπος είναι.
Εάν είναι αρχείο, τότε ανοίγουμε έναν δεύτερο file descriptor στο ίδιο αρχείο και ψάχνουμε να βρούμε εάν υπάρχει κάποια 
εγγραφή που να έχει το ίδιο inode με αυτό και ο indicator για το inode στο νέο directory να είναι διαφορετικός από το 0. 
Αυτό γίνεται για να καταλάβουμε εάν το αρχείο αυτό αποτελεί hard link. Εάν δεν είναι hard link τότε δημιουργούμε (byte by 
byte) το αρχείο στο νέο directory και ενημερώνουμε το νέο inode στο Entities αρχείο. Εάν είναι hard link (δηλαδή το νέο 
inode έχει τιμή πέραν του 0), τότε δημιουργούμε το hard link προς το inode που συναντήσαμε και ενημερώνουμε με το ίδιο 
inode στο Entities αρχείο μας. 
Εάν είναι directory, τότε απλά το δημιουργούμε στο καινούριο directory.
Και στην περίπτωση των files και στην περίπτωση των directories διατηρούμε τα ίδια permissions.
Μόλις προσπελάσουμε όλα τα entities μας και έχουμε δημιουργήσει όλα τα directories και τα files μας, τότε κάνουμε ξανά 
traverse το αρχείο μας για να δημιουργήσουμε τα symbolic links μας. Αυτό γίνεται για να αποφύγουμε race conditions, σε 
περιπτώσεις όπου συναντήσουμε κάποιο symbolic link πριν δημιουργηθεί το αρχείο στο οποίο δείχνει. Αφού δημιουργήσουμε τα 
links μας να δείχνουν στα σωστά αρχεία στο νέο directory, τότε ενημερώνουμε το νέο inode στο entities αρχείο.

Με αυτό τον τρόπο έχουμε δημιουργήσει έναν κλώνο του core directory μέσα στο νέο directory και είμαστε έτοιμοι να προσπε-
λάσουμε τις διαφορές του άλλου.

Merge Differences Directory:

Η λογική που ακολουθείται είναι η ίδια με το merge του core, με τη διαφορά ότι εδώ εξετάζουμε τα hard links μας στο νέο 
directory. Αυτό επιτυγχάνεται κάνοντας traverse για άλλη μια φορά το differences αρχείο μας για να δούμε εάν υπάρχουν 
ίδια inodes αλλά με διαφορετικό path. Εάν υπάρχουν και το inode τους είναι διαφορετικό του 0, τότε φτιάχνουμε hardlink 
στο νέο inode τους. Εάν είναι 0, τότε δημιουργούμε αυτό το αρχείο, ώστε όταν θα έρθει η σειρά του άλλου entity να δημιουρ-
γηθεί ένα hard link στο άλλο entity. Εάν δεν βρεθεί κάποιο τέτοιο entity στο differences αρχείο, τότε προσπαθούμε να 
κάνουμε access το path του στο νέο directory. Εάν υπάρχει, τότε δημιουργούμε hard link στο path αυτό, διαφορετικά δημιουρ-
γούμε ένα κοινό file.
Τα directories και τα symbolic links δημιουργούνται με τον ίδιο τρόπο που έγιναν και στην merge core.

Σε όλες τις περιπτώσεις (πλην των directories) εξετάζουμε εάν υπάρχει entity με το ίδιο όνομα και αν αυτό ισχύει τότε κρα-
τάμε αυτό με το πιο προσφατό last modified date.

Ουσιαστικά το merge γίνεται με την κλήση της copyEntities 2 φορές. Την πρώτη για να περάσουμε το core και την δεύτερη για 
να περάσουμε τα entities του differences. Η copyEntities αναγνωρίζει αυτή τη διαφορά με την ύπαρξη ή όχι ενός δεύτερου 
file descriptor στην γραμμή των ορισμάτων της.

_____________________________________________________________________________________________________________________________
SOURCE/HEADER FILES ΤΟΥ ΠΡΟΓΡΑΜΜΑΤΟΣ:

interface.h: Παρέχει την δήλωση της δομής "Metadata" (η οποία χρησιμοποιείται για να ενημερώνουμε τα μέλη της 
             "int dirA", "int dirB", τα οποία είναι counters των διαφόρων του εκάστοτε directory, που γράφονται
             στο εκάστοτε differences αρχείο ως header).
             Επίσης παρέχει την δήλωση των συναρτήσεων που έχουν υλοποιηθεί.

cmpcat.c: Παρέχει την συνάρτηση main, που είναι αυτή που καλεί τις βασικές συναρτήσεις του προγράμματος είτε μόνο
          για την σύγκριση (compareDirectories) είτε και για την συγχώνευση (mergeDirectories).

functions.c: Παρέχει την υλοποίηση όλων των βασικών, αλλά και των βοηθητικών αυτών, συναρτήσεων του προγράμματος.
             Οι συναρτήσεις είναι οι εξής:


  Συναρτήσεις αρχικοποίησης (βοηθητικές για την main):

   -createFilePath(): Δημιουργεί ένα path στο ίδιο directory με το cmpcat (για την περίπτωση κλήσης του cmpcat από άλλο dir).

   -initializeFilesAndDescriptors(): Δημιουργεί τα 4 αρχεία (2 αρχεία entities και 2 αρχεία differences).


  Συναρτήσεις για την υλοποίηση της σύγκρισης:

   -compareDirectories(): Είναι η βασική, αναδρομική, συνάρτηση που κάνει το compare operation. Χρησιμοποιεί κάποιες 
                          άλλες συναρτήσεις για να το επιτύχει.

   -traverseSame(): Καλείται από την compareDirectories μόνο στην περίπτωση που έχει δωθεί σαν όρισμα το ιδιο directory
                    ως dirA και dirB. Είναι από μόνη της αναδρομική, και εφόσον κληθεί, η compareDirectories δεν θα 
                    ξανακληθεί. Κάνει traverse ολόκληρο το directory (το ένα από τα δύο εφόσον πρόκειται για το ίδιο),
                    και ενημερώνει κατάλληλα τα entities αρχεία (και τα δυο για λόγους ευκολίας παρακάτω).

   -traversedirA(): Καλείται από την compareDirectories. Είναι αυτή που συμβάλει στην αναδρομικότητα της 
                    compareDirectories, εφόσον σε κάποιες περιπτώσεις την καλεί αναδρομικά. Ουσιαστικά κάνει traverse
                    το 1ο directory (dirA) και για κάθε entity που βρίσκει ελέγχει αν το αντίστοιχο entity υπάρχει στο
                    2ο directory (dirB). Αν υπάρχει, τα συγκρίνει ώστε να βρει αν υπάρχουν διαφορές. Όταν συναντάει 
                    entity που ειναι τύπου directory, τότε είναι που καλεί αναδρομικά την compareDirectories.

   -traversedirB_extras(): Καλείται από την compareDirectories. Κάνει traverse το 2ο directory (dirΒ) και 
                           για κάθε entity που βρίσκει ελέγχει αν το αντίστοιχο entity υπάρχει στο 2ο directory (dirA).
                           Ουσιαστικά ελέγχει για τα entities που υπάρχουν στο dirB αλλά δεν υπάρχουν στο dirA (δηλαδή
                           αυτά που η traversedirA δεν είχε "πιάσει").

   -subdir_update(): Είναι μια βοηθητική, αναδρομική, συνάρτηση που κάνει traverse ένα directory (subdirectory στις 
                     περιπτώσεις που καλείται) και αποθηκεύει τα περιεχόμενα του στο αρχείο που δέχεται σαν όρισμα.

   -updateFiles(): Είναι μια βοηθητική συνάρτηση, υπεύθυνη για την ενημέρωση των 4 αρχείων με το εκάστοτε entity.

   -compareFileContent(): Είναι μια βοηθητική συνάρτηση, που συγκρίνει τα περιεχόμενα 2 αρχείων (συγκρίνοντας τα bytes τους).

   -entityExists: Είναι μια βοηθητική συνάρτηση, που ελέγχει αν ένα FS entity υπάρχει ή οχι.

   -extractEntityName(): Είναι μια βοηθητική συνάρτηση, που επιστρέφει το entity-name, δωθέντος το full path του. 

   -extendPath(): Είναι μια βοηθητική συνάρτηση, που προσθέτει σε ένα path, ένα extra entity (πχ path/entity_name),
                  και επιστρέφει το νέο path.


  Συναρτήσεις για την υλοποίηση της συγχώνευσης:

   -mergeDirectories(): Είναι η βασική συνάρτηση που κάνει το merge operation. Χρησιμοποιεί μια άλλη συνάρτηση για 
                        να το επιτύχει.

   -copyEntities(): Καλείται από την mergeDirectories, δύο φορές, με διαφοροποιημένα ορίσματα κάθε φορά. Στην πρώτη της
                    κλήση κάνει copy όλα τα στοιχεία του ενός directory (πχ dirA) στο νέο directory (dirC). Στην δεύτερη
                    κλήση κάνει copy όλες τις διαφορές του άλλου directory (πχ dirB), σε σχέση με το πρώτο, στο νεο
                    directory (dirC).

   -check_for_hard_link_on_second_file(): Είναι μια βοηθητική συνάρτηση, που συμβάλει στον έλεγχο για την δημιουργία 
                                          hard links, και χρησιμοποιείται απο την copyEntities κατά την δευτερή της κλήση

   -copyFile(): Είναι μια βοηθητική συνάρτηση, που αντιγράφει ένα αρχείο μέσα στο δωσμένο directory.

   -changeParentPath(): Eίναι μια βοηθητική συνάρτηση, που αλλάζει το parent-dir ενός full path, με ένα νεο parent-dir.
